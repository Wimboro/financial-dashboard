import { Capacitor } from '@capacitor/core';
import { StatusBar, Style } from '@capacitor/status-bar';
import { SplashScreen } from '@capacitor/splash-screen';
import { Network } from '@capacitor/network';
import { Share } from '@capacitor/share';

export class CapacitorUtils {
  static isNative(): boolean {
    return Capacitor.isNativePlatform();
  }

  static getPlatform(): string {
    return Capacitor.getPlatform();
  }

  // Status Bar Management
  static async setStatusBarStyle(isDark: boolean): Promise<void> {
    if (!this.isNative()) return;

    try {
      await StatusBar.setStyle({
        style: isDark ? Style.Dark : Style.Light,
      });
      
      await StatusBar.setBackgroundColor({
        color: isDark ? '#0f172a' : '#f8fafc',
      });
    } catch (error) {
      console.warn('StatusBar not available:', error);
    }
  }

  // Splash Screen Management
  static async hideSplashScreen(): Promise<void> {
    if (!this.isNative()) return;

    try {
      await SplashScreen.hide();
    } catch (error) {
      console.warn('SplashScreen not available:', error);
    }
  }

  // Network Status
  static async getNetworkStatus(): Promise<{ connected: boolean; connectionType: string }> {
    if (!this.isNative()) {
      return {
        connected: navigator.onLine,
        connectionType: 'unknown'
      };
    }

    try {
      const status = await Network.getStatus();
      return {
        connected: status.connected,
        connectionType: status.connectionType
      };
    } catch (error) {
      console.warn('Network status not available:', error);
      return {
        connected: navigator.onLine,
        connectionType: 'unknown'
      };
    }
  }

  // Share Functionality
  static async shareData(data: {
    title?: string;
    text?: string;
    url?: string;
  }): Promise<boolean> {
    if (!this.isNative()) {
      // Fallback to Web Share API
      if (navigator.share) {
        try {
          await navigator.share(data);
          return true;
        } catch (error) {
          console.warn('Web Share API failed:', error);
          return false;
        }
      }
      return false;
    }

    try {
      await Share.share(data);
      return true;
    } catch (error) {
      console.warn('Native share failed:', error);
      return false;
    }
  }

  // Share Financial Report
  static async shareFinancialReport(data: {
    totalIncome: number;
    totalExpenses: number;
    netBalance: number;
    period: string;
  }): Promise<boolean> {
    const formatCurrency = (value: number): string => {
      return value.toLocaleString('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      });
    };

    const shareText = `ðŸ“Š Laporan Keuangan ${data.period}

ðŸ’° Total Pemasukan: ${formatCurrency(data.totalIncome)}
ðŸ’¸ Total Pengeluaran: ${formatCurrency(data.totalExpenses)}
ðŸ“ˆ Saldo Bersih: ${formatCurrency(data.netBalance)}

Generated by Financial Dashboard App`;

    return this.shareData({
      title: `Laporan Keuangan ${data.period}`,
      text: shareText
    });
  }

  // Initialize Capacitor features
  static async initialize(isDarkMode: boolean): Promise<void> {
    if (!this.isNative()) return;

    try {
      // Set status bar style
      await this.setStatusBarStyle(isDarkMode);
      
      // Hide splash screen after a delay
      setTimeout(async () => {
        await this.hideSplashScreen();
      }, 2000);

      // Listen for network changes
      Network.addListener('networkStatusChange', (status) => {
        console.log('Network status changed:', status);
        // You can dispatch events or update global state here
      });

    } catch (error) {
      console.warn('Capacitor initialization failed:', error);
    }
  }

  // App lifecycle management
  static addAppStateListeners(): void {
    if (!this.isNative()) return;

    document.addEventListener('deviceready', () => {
      console.log('Device is ready');
    });

    document.addEventListener('pause', () => {
      console.log('App paused');
      // Save any pending data
    });

    document.addEventListener('resume', () => {
      console.log('App resumed');
      // Refresh data if needed
    });
  }
}

// Export individual functions for convenience
export const {
  isNative,
  getPlatform,
  setStatusBarStyle,
  hideSplashScreen,
  getNetworkStatus,
  shareData,
  shareFinancialReport,
  initialize,
  addAppStateListeners
} = CapacitorUtils; 